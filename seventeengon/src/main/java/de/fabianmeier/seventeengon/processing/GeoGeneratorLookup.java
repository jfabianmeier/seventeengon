package de.fabianmeier.seventeengon.processing;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FileUtils;

import de.fabianmeier.seventeengon.geoobjects.GeoHolder;
import de.fabianmeier.seventeengon.naming.CompName;
import de.fabianmeier.seventeengon.naming.CompNamePattern;
import de.fabianmeier.seventeengon.naming.Sentence;
import de.fabianmeier.seventeengon.naming.SentencePattern;

public class GeoGeneratorLookup
{
	private static Map<SentencePattern, GeoGenerator> lookUp = new HashMap<>();
	private static Map<CompNamePattern, GeoGenerator> compLookUp = new HashMap<>();

	private static Map<ReducedSentencePattern, SentencePattern> secondLookUp = new HashMap<>();

	public static File geoDefinition = new File("C:\\temp\\geoDefinition.txt");

	static
	{
		add(new Sentence("Sei P ein Punkt"), new PointGenerator());
		add(new Sentence("Sei ABC ein Dreieck"), new TriangleGenerator());

		try
		{
			List<String> geoLines = FileUtils.readLines(geoDefinition,
					Charset.defaultCharset());

			boolean lineStart = true;

			Sentence toDefine = null;
			List<Sentence> blockLines = new ArrayList<Sentence>();

			for (String line : geoLines)
			{
				if (line.trim().equals(""))
				{
					lineStart = true;
					if (toDefine != null)
					{
						add(toDefine, blockLines);
					}
					continue;
				}

				String trimmedLine = line.trim();

				if (!Sentence.isSentence(trimmedLine))
					throw new IOException("No valid sentence: " + trimmedLine);

				Sentence lineSentence = new Sentence(trimmedLine);

				if (lineStart)
				{
					toDefine = lineSentence;
					blockLines = new ArrayList<Sentence>();
					lineStart = false;
					continue;
				}

				blockLines.add(lineSentence);
			}

		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static SentencePattern getValidSentencePattern(Sentence input)
			throws IOException
	{
		SentencePattern pattern = new SentencePattern(input);

		if (lookUp.containsKey(pattern))
			return pattern;

		ReducedSentencePattern reducedPattern = new ReducedSentencePattern(
				input);
		SentencePattern pattern2 = secondLookUp.get(reducedPattern);

		if (pattern2 != null)
		{
			System.out.println("Replace pattern " + pattern.toString() + " by "
					+ pattern2.toString());
			return pattern2;
		}

		for (ReducedSentencePattern rsp : secondLookUp.keySet())
		{
			if (rsp.compatibleWith(reducedPattern))
			{
				SentencePattern pattern3 = secondLookUp.get(rsp);
				System.out.println("Replace pattern " + pattern.toString()
						+ " by " + pattern3.toString()
						+ " due to compatability.");
				return pattern3;
			}
		}

		throw new IOException(
				"No compatible pattern found for" + pattern + ".");

	}

	/**
	 * Adds the objects generated by the sentence to geoHolder
	 * 
	 * @param geoHolder
	 *            geoHolder
	 * @param input
	 *            Sentence
	 * @throws IOException
	 *             if some sentence is not well-formed or not recorded.
	 */
	public static void generateAndAdd(GeoHolder geoHolder, Sentence input)
			throws IOException
	{
		SentencePattern pattern = getValidSentencePattern(input);
		GeoGenerator generator = get(pattern);
		generator.generateAndAdd(geoHolder,
				generateNewSentenceForPattern(pattern, input));
	}

	private static Sentence generateNewSentenceForPattern(
			SentencePattern pattern, Sentence input)
	{
		List<CompName> compNameList = input.getCompositeNames();
		StringBuilder back = new StringBuilder();

		List<String> wordList = pattern.getWords();

		int compCount = 0;
		for (String word : wordList)
		{
			if (word != null)
				back.append(word + " ");
			else
			{
				back.append(compNameList.get(compCount) + " ");
				compCount++;
				if (compCount > compNameList.size())
					throw new IllegalArgumentException(
							"Not fitting pattern and input: " + pattern
									+ " vs. " + input);
			}

		}

		return new Sentence(back.toString());

	}

	public static GeoGenerator get(SentencePattern pattern) throws IOException
	{
		return lookUp.get(pattern);

	}

	public static GeoGenerator get(Sentence sentence) throws IOException
	{
		return get(new SentencePattern(sentence));
	}

	/**
	 * 
	 * @param compPattern
	 *            a CompPattern from the dictionary
	 * @return the saved geoGenerator, otherwise an exception
	 */
	public static GeoGenerator get(CompNamePattern compPattern)
	{
		if (!compLookUp.containsKey(compPattern))
			throw new IllegalArgumentException(
					"SentencePattern " + compPattern + " not defined.");

		return compLookUp.get(compPattern);
	}

	/**
	 * adds a sentence/geoGenerator pair to the dictionary
	 * 
	 * @param sentence
	 *            Sentence
	 * @param geoGen
	 *            GeoGenerator
	 */
	public static void add(Sentence sentence, GeoGenerator geoGen)
	{
		lookUp.put(new SentencePattern(sentence), geoGen);
		secondLookUp.put(new ReducedSentencePattern(sentence),
				new SentencePattern(sentence));
	}

	/**
	 * A sentence with a list of sentences which define it.
	 * 
	 * @param sentence
	 *            Sentence
	 * @param replacement
	 *            Replacement list
	 */
	public static void add(Sentence sentence, List<Sentence> replacement)
	{
		GeoGenerator localGeo = new RecursiveGeoGenerator(sentence,
				replacement);

		add(sentence, localGeo);

	}

	public static void add(CompName compName, GeoGenerator geoGen)
	{
		compLookUp.put(new CompNamePattern(compName), geoGen);
	}

}
